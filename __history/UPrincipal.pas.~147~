unit UPrincipal;

interface

uses
  System.SysUtils,
  System.Types,
  System.UITypes,
  System.Classes,
  System.Variants,
  FMX.Types,
  FMX.Controls,
  FMX.Forms,
  FMX.Graphics,
  FMX.Dialogs,
  FMX.Objects,
  FMX.Layouts,
  FMX.Gestures,
  FMX.Controls.Presentation,
  FMX.StdCtrls,
  FMX.Menus,
  FMX.ListBox,
  FMX.Effects,
  uDM,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.FMXUI.Wait,
  Data.DB,
  FireDAC.Comp.Client,
  FireDAC.Phys.MySQL,
  FireDAC.Phys.MySQLDef,
  FireDAC.Stan.Param,
  FireDAC.DatS,
  FireDAC.DApt.Intf,
  FireDAC.DApt,
  FireDAC.VCLUI.Wait,
  FireDAC.Comp.UI,
  FireDAC.Comp.DataSet,
  FMX.Clipboard.Win,
  FMX.Platform,
  FMX.Surfaces,
  Winapi.Windows,
  System.IOUtils,
  FMX.Colors,
  System.UIConsts;


type
  TFrmPrincipal = class(TForm)
    Circle1: TCircle;
    Image4: TImage;
    GestureManager1: TGestureManager;
    Layout1: TLayout;
    PopupMenu1: TPopupMenu;
    MenuItem1: TMenuItem;
    MenuItem2: TMenuItem;
    MenuItem3: TMenuItem;
    Panel1: TPanel;
    MainMenu1: TMainMenu;
    MenuItem4: TMenuItem;
    Panel2: TPanel;
    Panel3: TPanel;
    MenuItem5: TMenuItem;
    MenuItem6: TMenuItem;
    MenuItem7: TMenuItem;
    MenuItem8: TMenuItem;
    MenuItem9: TMenuItem;
    MenuItem10: TMenuItem;
    MenuItem11: TMenuItem;
    MenuItem12: TMenuItem;
    RectangleBottom: TRectangle;
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    Button4: TButton;
    RectanguleLateralEsquerda: TRectangle;
    Panel4: TPanel;
    Button5: TButton;
    ShadowEffect1: TShadowEffect;
    ShadowEffect2: TShadowEffect;
    ShadowEffect3: TShadowEffect;
    ShadowEffect4: TShadowEffect;
    ShadowEffect5: TShadowEffect;
    MenuItem13: TMenuItem;
    Panel5: TPanel;
    Image1: TImage;
    Image5: TImage;
    ShadowEffect9: TShadowEffect;
    MenuItem14: TMenuItem;
    MenuItem15: TMenuItem;
    Panel6: TPanel;
    RectangleTop: TRectangle;
    RectanguleLaretalDireito: TRectangle;
    MenuItem16: TMenuItem;
    Button6: TButton;
    ShadowEffect10: TShadowEffect;
    Rectangle1: TRectangle;
    Panel7: TPanel;
    LblNomeModelo: TLabel;
    ShadowEffect11: TShadowEffect;
    CBMarcas: TComboBox;
    ShadowEffect6: TShadowEffect;
    Label3: TLabel;
    CBModelo: TComboBox;
    Label4: TLabel;
    ComboBox3: TComboBox;
    Label5: TLabel;
    ComboBox4: TComboBox;
    Label2: TLabel;
    TrackBar1: TTrackBar;
    ShadowEffect8: TShadowEffect;
    ShadowEffect12: TShadowEffect;
    ShadowEffect13: TShadowEffect;
    Label6: TLabel;
    Label1: TLabel;
    ShadowEffect7: TShadowEffect;
    Image2: TImage;
    MenuItem17: TMenuItem;
    MenuItem18: TMenuItem;
    procedure Circle1Gesture(Sender: TObject;
      const EventInfo: TGestureEventInfo; var Handled: Boolean);
    procedure FormCreate(Sender: TObject);
    procedure Circle1Click(Sender: TObject);
    procedure Circle1MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure Circle1MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure Layout1MouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Single);
    procedure Image4Click(Sender: TObject);
    procedure Image4Gesture(Sender: TObject; const EventInfo: TGestureEventInfo;
      var Handled: Boolean);
    procedure Image4MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure Image4MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure Circle1DblClick(Sender: TObject);
    procedure Image4DblClick(Sender: TObject);
    procedure MenuItem1Click(Sender: TObject);

    procedure NewImagemClick(Sender: TObject);
    procedure NewImagemDbClick(Sender: TObject);
    procedure NewImagemMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure NewImagemGesture(Sender: TObject;
              const EventInfo: TGestureEventInfo;
              var Handled: Boolean);
    procedure NewImagemMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure FormShow(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    procedure MenuItem14Click(Sender: TObject);
    procedure MenuItem16Click(Sender: TObject);
    procedure Button6Click(Sender: TObject);
    procedure Image4MouseWheel(Sender: TObject; Shift: TShiftState;
      WheelDelta: Integer; var Handled: Boolean);
    procedure TrackBar1Change(Sender: TObject);
    procedure MenuItem3Click(Sender: TObject);
    procedure CBMarcasChange(Sender: TObject);

  private
    { Private declarations }
    MoveObjeto: Boolean;
    MoveObjeto2: Boolean;
    OffSet: TPointF;
    NewCircle: TCircle;
    NewImagem: TImage;
    FIdMarcaSelecionada: integer;
    qry: TFDQuery;
    procedure Modo_Edicao(editar: Boolean);
    procedure Modo_Edicao2(editar: Boolean);
    procedure NewImagemMouseWheel(Sender: TObject; Shift: TShiftState;
      WheelDelta: Integer; var Handled: Boolean);

    //function RGBToAlphaColor(R, G, B: Byte): TAlphaColor;

  public
    { Public declarations }

  end;

var
  FrmPrincipal: TFrmPrincipal;

implementation

{$R *.fmx}
{$R *.LgXhdpiPh.fmx ANDROID}

procedure TFrmPrincipal.Button5Click(Sender: TObject);
var
  OpenDialog: TOpenDialog;
begin
  OpenDialog := TOpenDialog.Create(Self);
  try
    OpenDialog.Filter := 'Arquivos de Imagem|*.bmp;*.jpg;*.jpeg;*.png';
    if OpenDialog.Execute then
    begin
      Image1.Bitmap.LoadFromFile(OpenDialog.FileName);
      LblNomeModelo.Text:= ChangeFileExt(TPath.GetFileName(OpenDialog.FileName), '');
    end;
  finally
    OpenDialog.Free;
  end;

end;

procedure TFrmPrincipal.Button6Click(Sender: TObject);
begin
  keybd_event(VK_MENU, MapVirtualKey(VK_MENU, 0), 0, 0); // Pressiona a tecla Alt
  keybd_event(VK_SNAPSHOT, MapVirtualKey(VK_SNAPSHOT, 0), 0, 0); // Pressiona a tecla Print Screen
  keybd_event(VK_SNAPSHOT, MapVirtualKey(VK_SNAPSHOT, 0), KEYEVENTF_KEYUP, 0); // Libera a tecla Print Screen
  keybd_event(VK_MENU, MapVirtualKey(VK_MENU, 0), KEYEVENTF_KEYUP, 0); // Libera a tecla Alt
end;

procedure TFrmPrincipal.CBMarcasChange(Sender: TObject);
begin
  FIdMarcaSelecionada:=  StrToInt(CBMarcas.Items[CBMarcas.ItemIndex])//Traz o nome do modelo;
  //CBMarcas.ItemIndex;//  DM.FDQMarcas.FieldByName('IDMARCA').value; //StrToInt(CBMarcas.Items.Strings[CBMarcas.ItemIndex]);

   { Carregar o combobox Modelos}
   qry:= TFDQuery.Create(nil);
   qry.Connection:= DM.FDConnection1;
   try
     qry.Close;
     qry.SQL.Text:='SELECT MO.IDMARCA,MO.MODELO FROM MODELOS MO ' +
                   ' INNER JOIN MARCA MA ON(MO.IDMARCA = MA.IDMARCA)' +
                   ' WHERE MO.IDMARCA =:IDMARCA';
     Showmessage(IntToStr(FIdMarcaSelecionada));
     qry.ParamByName('IDMARCA').DataType   := ftSmallint;
     qry.ParamByName('IDMARCA').AsSmallint := FIdMarcaSelecionada;
     qry.Open;
     qry.SQL.SaveToFile('c:\sql.txt');
     ShowMessage('A Qtde de Modelos é de: ' +IntToStr(qry.RecordCount));

     qry.First;
     While Not qry.Eof do
     begin
       CBModelo.Items.Add(qry.FieldByName('modelo').AsString);
       qry.Next;
     end;
   finally
     qry.Close;
     qry.Free;
   end;
end;

procedure TFrmPrincipal.Circle1Click(Sender: TObject);
begin
  if circle1.Tag = 0 then
  begin
    Showmessage('Abrir opções...');
  end;
end;

procedure TFrmPrincipal.Circle1DblClick(Sender: TObject);
begin
  Circle1.Width  := Circle1.Width + 1;
  Circle1.Height := Circle1.Height + 1;
end;

procedure TFrmPrincipal.Circle1Gesture(Sender: TObject;
  const EventInfo: TGestureEventInfo; var Handled: Boolean);
begin

  if EventInfo.GestureID = igiLongTap then
    Modo_Edicao(true);

  if EventInfo.GestureID = igiDoubleTap then
    Modo_Edicao(False);

end;

procedure TFrmPrincipal.Circle1MouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Single);
begin

 //Seta o Layout para capturar o mouse
 if circle1.Tag = 1 then
   layout1.Root.Captured := layout1;

 //Indica que o objeto pode se mover
 MoveObjeto:= True;

 OffSet.X := X;
 OffSet.Y := Y;

 //Windows: Botão direito muda o modoedição...
 if Button = TMouseButton.mbRight then
   Modo_Edicao(NOT Circle1.Tag.ToBoolean);

end;

procedure TFrmPrincipal.Circle1MouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Single);
begin
  MoveObjeto:= False;
end;

procedure TFrmPrincipal.FormCreate(Sender: TObject);
begin
  Modo_Edicao(false);


//   { Carregar o combobox Modelos}
//   qry:= TFDQuery.Create(nil);
//   qry.Connection:= DM.FDConnection1;
//   try
//     qry.Close;
//     qry.SQL.Text:='SELECT MO.IDMARCA,MO.MODELO FROM MODELOS MO ' +
//                   ' INNER JOIN MARCA MA ON(MO.IDMARCA = MA.IDMARCA)' +
//                   ' WHERE MO.IDMARCA =:IDMARCA';
//     Showmessage(IntToStr(FIdMarcaSelecionada));
//     qry.ParamByName('IDMARCA').DataType   := ftSmallint;
//     qry.ParamByName('IDMARCA').AsSmallint := FIdMarcaSelecionada;
//     qry.Open;
//
//     qry.First;
//     While  NOT qry.Eof do
//     begin
//       CBModelo.Items.Add(qry.FieldByName('modelo').AsString);
//       qry.Next;
//     end;
//   finally
//     qry.Close;
//     qry.Free;
//   end;
end;

procedure TFrmPrincipal.FormShow(Sender: TObject);
begin
   //Carregar todos os fabricantes no Combobox1
   DM.FDQMarcas.Open;

   //Showmessage(IntToStr(DM.FDQMarcas.RecordCount));
   DM.FDQMarcas.First;
   While  NOT DM.FDQMarcas.Eof do
   begin
     CBMarcas.Items.Add(DM.FDQMarcas.FieldByName('marca').AsString);
     DM.FDQMarcas.Next;
   end;


end;

procedure TFrmPrincipal.Image4Click(Sender: TObject);
begin
  if circle1.Tag = 0 then
  begin
    Popupmenu1.Popup(OffSet.X, OffSet.Y);
  end;
end;

procedure TFrmPrincipal.Image4DblClick(Sender: TObject);
begin
  Circle1.Width  := Circle1.Width + 1;
  Circle1.Height := Circle1.Height + 1;
end;

procedure TFrmPrincipal.Image4Gesture(Sender: TObject;
  const EventInfo: TGestureEventInfo; var Handled: Boolean);
begin
  if EventInfo.GestureID = igiLongTap then
    Modo_Edicao2(true);

  if EventInfo.GestureID = igiDoubleTap then
    Modo_Edicao2(False);
end;

procedure TFrmPrincipal.Image4MouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Single);
begin
  //Seta o Layout para capturar o mouse
  if circle1.Tag = 1 then
    layout1.Root.Captured := layout1;

  //Indica que o objeto pode se mover
  MoveObjeto:= True;

  OffSet.X := X;
  OffSet.Y := Y;

   //Windows: Botão direito muda o modo de edição...
  if Button = TMouseButton.mbRight then
    Modo_Edicao(NOT Circle1.Tag.ToBoolean);

  if Button = TMouseButton.mbMiddle then
  begin
    Circle1.Width  := Circle1.Width - 1;
    Circle1.Height := Circle1.Height - 1;
  end;

end;

procedure TFrmPrincipal.Image4MouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Single);
begin
  MoveObjeto:= False;
end;

procedure TFrmPrincipal.Image4MouseWheel(Sender: TObject; Shift: TShiftState;
  WheelDelta: Integer; var Handled: Boolean);
begin
  if Circle1.Tag = 1 then
  begin
    if WheelDelta < 0 then // Rolar para trás diminui
    begin
      Circle1.Width  := Circle1.Width - 3;
      Circle1.Height := Circle1.Height - 3;
    end
    else if WheelDelta > 0 then // Rolar para frente aumenta
    begin
      Circle1.Width  := Circle1.Width + 3;
      Circle1.Height := Circle1.Height + 3;
    end;
  end
  else
    Exit;

end;

procedure TFrmPrincipal.NewImagemMouseWheel(Sender: TObject; Shift: TShiftState;
  WheelDelta: Integer; var Handled: Boolean);
begin
  if NewCircle.Tag = 1 then
  begin
     if WheelDelta < 0 then // Rolar para trás diminui
    begin
      NewCircle.Width  := NewCircle.Width - 3;
      NewCircle.Height := NewCircle.Height - 3;
    end
    else if WheelDelta > 0 then // Rolar para frente aumenta
    begin
      NewCircle.Width  := NewCircle.Width + 3;
      NewCircle.Height := NewCircle.Height + 3;
    end;
  end
  else
    Exit;
end;

//function TFrmPrincipal.RGBToAlphaColor(R, G, B: Byte): TAlphaColor;
//begin
//  Result := MakeColor(R, G, B);
//end;

procedure TFrmPrincipal.TrackBar1Change(Sender: TObject);
begin
  Image4.Opacity    := TrackBar1.Value / TrackBar1.Max;
  if Assigned(NewImagem) then
    NewImagem.Opacity := TrackBar1.Value / TrackBar1.Max;
end;

procedure TFrmPrincipal.Layout1MouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Single);
begin
  if (Circle1.Tag = 1) and (MoveObjeto) and (ssLeft In Shift) then
  begin
    Circle1.Position.X := X - OffSet.X;
    Circle1.Position.Y := Y - OffSet.Y;
  end;
  if Assigned(NewCircle) then
  begin
    if (NewCircle.Tag = 1) and (MoveObjeto) and (ssLeft In Shift) then
    begin
      NewCircle.Position.X := X - OffSet.X;
      NewCircle.Position.Y := Y - OffSet.Y;
    end;
  end;
end;

procedure TFrmPrincipal.MenuItem14Click(Sender: TObject);
begin
  //Chamar algum componente de cores.
end;

procedure TFrmPrincipal.MenuItem16Click(Sender: TObject);
begin
  keybd_event(VK_MENU, MapVirtualKey(VK_MENU, 0), 0, 0); // Pressiona a tecla Alt
  keybd_event(VK_SNAPSHOT, MapVirtualKey(VK_SNAPSHOT, 0), 0, 0); // Pressiona a tecla Print Screen
  keybd_event(VK_SNAPSHOT, MapVirtualKey(VK_SNAPSHOT, 0), KEYEVENTF_KEYUP, 0); // Libera a tecla Print Screen
  keybd_event(VK_MENU, MapVirtualKey(VK_MENU, 0), KEYEVENTF_KEYUP, 0); // Libera a tecla Alt
end;

procedure TFrmPrincipal.MenuItem1Click(Sender: TObject);
begin
  if NOT Assigned(NewCircle) then
  begin
    // Create a new TCircle component
    NewCircle := TCircle.Create(Self);

    // Copy the properties of the original TCircle component
    NewCircle.Position.X := Circle1.Position.X + 50;
    NewCircle.Position.Y := Circle1.Position.Y + 50;
    NewCircle.Width      := Circle1.Width;
    NewCircle.Height     := Circle1.Height;
    NewCircle.Fill.Color := Circle1.Fill.Color;

    //Criar o TImage dentro do NewCircle
    NewImagem:= TImage.Create(NewCircle);
    NewImagem.Parent:= NewCircle;
    NewImagem.Bitmap.Assign(TImage(Circle1.Children[0]).Bitmap);
    NewImagem.Align:=  TalignLayout.Client;

    // Copy the events from the original TImage to the new TImage
    NewImagem.OnClick      :=  NewImagemClick;
    NewImagem.OnDblClick   :=  NewImagemDbClick;
    NewImagem.OnGesture    :=  NewImagemGesture;
    NewImagem.OnMouseDown  :=  NewImagemMouseDown;
    NewImagem.OnMouseUp    :=  NewImagemMouseUp;
    NewImagem.OnMouseWheel :=  NewImagemMouseWheel;

    NewCircle.Parent := Self;
  end
  else
  begin
    Exit;
  end;

end;

procedure TFrmPrincipal.MenuItem3Click(Sender: TObject);
begin
  Modo_Edicao(false);
  Modo_Edicao2(false);
end;

procedure TFrmPrincipal.Modo_Edicao(editar: Boolean);
begin
  With FrmPrincipal do
  begin
    if editar then
    begin
      circle1.Stroke.Color := $000000;//$FFFFFFFF; //Branco
      circle1.Stroke.Dash  := TStrokeDash.Dash; //traços
      circle1.Tag:= 1; //indica Sim Modo Edição
      circle1.Opacity:= 0.7;
    end
    else
    begin
      circle1.Stroke.Color := $000000;//$FFFD5872; //vermelho
      circle1.Stroke.Dash  := TStrokeDash.Solid;// linha sólida
      circle1.Tag:= 0; //indica não modo deedição
      circle1.Opacity:= 1;
    end;
  end;
end;

procedure TFrmPrincipal.Modo_Edicao2(editar: Boolean);
begin
  With FrmPrincipal do
  begin
    if Assigned(NewCircle) then
    begin
      if editar then
      begin
        Newcircle.Stroke.Color := $000000;//$FFFFFFFF; //Branco
        Newcircle.Stroke.Dash  := TStrokeDash.Dash; //traços
        Newcircle.Tag:= 1; //indica Sim Modo Edição
        Newcircle.Opacity:= 0.7;
      end
      else
      begin
        Newcircle.Stroke.Color := $000000;//$FFFD5872; //vermelho
        NewCircle.Stroke.Dash  := TStrokeDash.Solid;// linha sólida
        NewCircle.Tag:= 0; //indica não modo deedição
        NewCircle.Opacity:= 1;
      end;
    end;
  end;

end;

procedure TFrmPrincipal.NewImagemClick(Sender: TObject);
begin
  if NewCircle.Tag = 0 then
  begin
    Popupmenu1.Popup(OffSet.X, OffSet.Y);
  end;
end;

procedure TFrmPrincipal.NewImagemDbClick(Sender: TObject);
begin
  NewCircle.Width  := NewCircle.Width + 1;
  NewCircle.Height := NewCircle.Height + 1;
end;

procedure TFrmPrincipal.NewImagemGesture(Sender: TObject;
  const EventInfo: TGestureEventInfo; var Handled: Boolean);
begin
   if EventInfo.GestureID = igiLongTap then
    Modo_Edicao2(true);

  if EventInfo.GestureID = igiDoubleTap then
    Modo_Edicao2(False);
end;

procedure TFrmPrincipal.NewImagemMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Single);
begin
  //Seta o Layout para capturar o mouse
  if Newcircle.Tag = 1 then
    layout1.Root.Captured := layout1;

  //Indica que o objeto pode se mover
  MoveObjeto:= True;

  OffSet.X := X;
  OffSet.Y := Y;

   //Windows: Botão direito muda o modoedição...
  if Button = TMouseButton.mbRight then
    Modo_Edicao2(NOT NewCircle.Tag.ToBoolean);

  if Button = TMouseButton.mbMiddle then
  begin
    NewCircle.Width  := NewCircle.Width - 1;
    NewCircle.Height := NewCircle.Height - 1;
  end;

end;

procedure TFrmPrincipal.NewImagemMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Single);
begin
  MoveObjeto:= False;
end;

end.
